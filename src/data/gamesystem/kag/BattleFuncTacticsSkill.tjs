//=============================
//■バトルシーン用各種関数
//=============================
// battleFuncsからアクセス
//kag.fore.message[n].font.mapPrerenderedFont( "uppg12.tft" );

global.battleFuncsTacticsSkill= new battleTacticsSkill();

//戦術スキル関数軍
class battleTacticsSkill
{
	var SkillValue;
	var pow;
	var level;
	var def;
	var lnd;
	var band;
	var block;
	var powRevise;

	//コンストラクタ
	function battleTacticsSkill(){
	}
	
	//finalize
	function finalize(){
	}

	function setTacticsSkill(n,pos,side){
		var id;
		if(side == 'right'){
			for(var i=0;i<gf.skill.count;i++){
				id = "m"+gf.skill[i].id.substring(1,4);
				if(n == id){
					tf.skillListR[pos][0] = gf.skill[i]  ;dm(tf.skillListR[pos][0].name);
					tf.skillListR[pos][1] = gf.skill[i+1];dm(tf.skillListR[pos][1].name);
					tf.skillListR[pos][2] = gf.skill[i+2];dm(tf.skillListR[pos][2].name);
					tf.skillListR[pos][3] = gf.skill[i+3];dm(tf.skillListR[pos][3].name);
					tf.skillListR[pos][4] = gf.skill[i+4];dm(tf.skillListR[pos][4].name);
					break;
				}
			}
		}
		if(side == 'left'){
			for(var i=0;i<gf.skill.count;i++){
				id = "m"+gf.skill[i].id.substring(1,4);
				if(n == id){
					tf.skillListL[pos][0] = gf.skill[i]  ;dm(tf.skillListL[pos][0].name);
					tf.skillListL[pos][1] = gf.skill[i+1];dm(tf.skillListL[pos][1].name);
					tf.skillListL[pos][2] = gf.skill[i+2];dm(tf.skillListL[pos][2].name);
					tf.skillListL[pos][3] = gf.skill[i+3];dm(tf.skillListL[pos][3].name);
					tf.skillListL[pos][4] = gf.skill[i+4];dm(tf.skillListL[pos][4].name);
					break;
				}
			}
		}
		return id;
	}

	function popupWindow(id){
	}

	function popupWindowErase(){
	}

	function useTacticsSkills(skillID){
		var _index;
		for(var i=0;i<gf.skill.count;i++){
			if(skillID == gf.skill[i].id){
				_index = i;
				return gf.skill[_index];
			}
		}
	}

	function calcInit(side,i,n,a){
		var attack = [];
		var defend = [];
		var target;
dm("i="+i+"/ a="+a+"/ n="+n);
		if(side == 'R'){
			attack = tf.rightParty;defend = tf.leftParty; target = tf.allyTarget;
			
			SkillValue = battleFuncSkillSet.searchSkill(n,'戦術障壁','left');if(SkillValue[0] == 1){tf.defenseL.戦障 = 1;tf.defenseL.戦障値 = SkillValue[1];}else{tf.defenseL.戦障 = 0;tf.defenseL.戦障値 = 0;}
			pow        = tf.tacticsSkillData.contents[i].pow;
			level      = attack[a].level;
			def        = defend[n].def;
			lnd        = tf.leftLnd;
			band       = tf.defenseL.戦結値;
			block      = tf.defenseL.戦障値;
			powRevise  = calc.tacticsSkillSetPowRevise(tf.tacticsSkillData.contents[i].type,tf.tacticsSkillData.contents[i].attribute,defend[n].attribute,defend[n].divine,attack[n].divine);
dm("防護:"+defend[n].divine+"/攻護:"+attack[a].divine);
		}else{
			attack = tf.leftParty ;defend = tf.rightParty;target = tf.enemyTarget;
			
			SkillValue = battleFuncSkillSet.searchSkill(n,'戦術障壁','right');if(SkillValue[0] == 1){tf.defenseR.戦障 = 1;tf.defenseR.戦障値 = SkillValue[1];}else{tf.defenseR.戦障 = 0;tf.defenseR.戦障値 = 0;}
			pow        = tf.tacticsSkillData.contents[i].pow;
			level      = attack[a].level;
			def        = defend[n].def;
			lnd        = tf.rightLnd;
			band       = tf.defenseR.戦結値;
			block      = tf.defenseR.戦障値;
			powRevise  = calc.tacticsSkillSetPowRevise(tf.tacticsSkillData.contents[i].type,tf.tacticsSkillData.contents[i].attribute,defend[n].attribute,defend[n].divine,attack[n].divine);
dm("防護:"+defend[n].divine+"/攻護:"+attack[a].divine);
		}
	}

	function calcTacticsSkill(skills,side,user){
		var attack = [];
		var defend = [];
		var target,target2;
		var a=user;
		tf.tacticsEffet;
		tf.viewTacticsSkillEffct     = [ [], [], [] ];
		tf.viewTacticsSkillDamageR   = [ [], [], [] ];
		tf.viewTacticsSkillDamageL   = [ [], [], [] ];
		tf.viewTacticsSkillRecoveryR = [ [], [], [] ];
		tf.viewTacticsSkillRecoveryL = [ [], [], [] ];
		if(side == 'R'){attack = tf.rightParty;defend = tf.leftParty; target = tf.allyTarget; target2 = tf.enemyTarget;}
		if(side == 'L'){attack = tf.leftParty ;defend = tf.rightParty;target = tf.enemyTarget;target2 = tf.allyTarget;}
		for(var i=0;i<6;i++){
			var SkillValue = battleFuncSkillSet.searchSkill(i,'戦術結界','right');if(SkillValue[0] == 1){tf.defenseR.戦結 = 1;tf.defenseR.戦結値 += SkillValue[1];}
			var SkillValue = battleFuncSkillSet.searchSkill(i,'戦術結界','left') ;if(SkillValue[0] == 1){tf.defenseL.戦結 = 1;tf.defenseL.戦結値 += SkillValue[1];}
		}
		//for(var i=0;i<6;i++){
		//	for(var k=0;k<gf.skill.count;k++){
		//		var id = "m"+gf.skill[k].id.substring(1,4);
		//		if(attack[i].id == id){a = i;break;}
		//	}
		//	if(a !== void){break;}
		//}

		for(var i=0;i<3;i++){
dm("["+i+"]…"+skills.contents[i].type+"…"+skills.contents[i].target+"…"+skills.contents[i].attribute+"…("+skills.contents[i].pow+")");
			if(skills.contents[i].type == 'ダメージ'){
				if(skills.contents[i].target == '敵軍単体'){
					for(var n=0;n<6;n++){
						if(target == n){
							calcInit(side,i,n,a);
							if(side == 'L'){
								tf.viewTacticsSkillDamageR[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
								//defend[n].HP.now -= tf.viewTacticsSkillDamageR[i][n];
							}else{
								tf.viewTacticsSkillDamageL[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
								//defend[n].HP.now -= tf.viewTacticsSkillDamageL[i][n];
							}
							tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
						}
					}
				}
				if(skills.contents[i].target == '自軍単体'){
					for(var n=0;n<6;n++){
						if(target == n){
							calcInit(side,i,n,a);
							if(side == 'L'){
								tf.viewTacticsSkillDamageL[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
								//attack[n].HP.now -= tf.viewTacticsSkillDamageL[i][n];
							}else{
								tf.viewTacticsSkillDamageR[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
								//attack[n].HP.now -= tf.viewTacticsSkillDamageR[i][n];
							}
							tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
						}
					}
				}

				if(skills.contents[i].target == '敵軍一列'){
					var count = 0;
dm("1count="+count);
					if(side == 'R'){for(var k=0;k<3;k++){if(tf.leftParty[k].id  == 0 || tf.leftParty[k].HP.now  < 1){count++;dm("Rcount="+count);}}}
					if(side == 'L'){for(var k=0;k<3;k++){if(tf.rightParty[k].id == 0 ||tf.rightParty[k].HP.now  < 1){count++;dm("Lcount="+count);}}}
					if(count == 3){count = 3;}else{count = 0;}
dm("2count="+count);
					for(var n=count;n<count+3;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.viewTacticsSkillDamageR[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//defend[n].HP.now -= tf.viewTacticsSkillDamageR[i][n];
						}else{
							tf.viewTacticsSkillDamageL[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//defend[n].HP.now -= tf.viewTacticsSkillDamageL[i][n];
						}
						tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
					}
				}
				if(skills.contents[i].target == '自軍一列'){
					var count = 0;
					if(side == 'R'){for(var k=0;k<3;k++){if(tf.leftParty[k].id  == 0 || tf.leftParty[k].HP.now  < 1){count++;dm("Rcount="+count);}}}
					if(side == 'L'){for(var k=0;k<3;k++){if(tf.rightParty[k].id == 0 ||tf.rightParty[k].HP.now  < 1){count++;dm("Lcount="+count);}}}
					if(count > 0){count = 3;}else{count = 0;}
					for(var n=count;n<count+3;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.viewTacticsSkillDamageL[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//attack[n].HP.now -= tf.viewTacticsSkillDamageL[i][n];
						}else{
							tf.viewTacticsSkillDamageR[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//attack[n].HP.now -= tf.viewTacticsSkillDamageR[i][n];
						}
						tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
					}
				}

				if(skills.contents[i].target == '敵軍全体'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.viewTacticsSkillDamageR[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//defend[n].HP.now -= tf.viewTacticsSkillDamageR[i][n];
						}else{
							tf.viewTacticsSkillDamageL[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//defend[n].HP.now -= tf.viewTacticsSkillDamageL[i][n];
						}
						tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
					}
				}
				if(skills.contents[i].target == '自軍全体'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.viewTacticsSkillDamageL[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//attack[n].HP.now -= tf.viewTacticsSkillDamageL[i][n];
						}else{
							tf.viewTacticsSkillDamageR[i][n] = calc.tacticsSkillDamage(pow,level,powRevise,def,lnd,band,block);
							//attack[n].HP.now -= tf.viewTacticsSkillDamageR[i][n];
						}
						tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
					}
				}

				//HP減算処理
				//バリア効果(右)
				var Max;
				var count;
				var member = [];
				for(var n=0;n<6;n++){
					if(tf.rightParty[n].id != 0 && tf.rightParty[n].HP.now > 0){
						var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','right');
						dm("R."+tf.rightParty[n].unitName+".巨大体躯:"+SkillValue[0]+"/巨大値="+SkillValue[1]);
						if(SkillValue[0] == 1){
							if(SkillValue[1] > 80){SkillValue[1] = 80;}
							tf.viewTacticsSkillDamageR[0][n] = (int)(tf.viewTacticsSkillDamageR[0][n] * ((100 - SkillValue[1]) / 100));
							tf.viewTacticsSkillDamageR[1][n] = (int)(tf.viewTacticsSkillDamageR[1][n] * ((100 - SkillValue[1]) / 100));
							tf.viewTacticsSkillDamageR[2][n] = (int)(tf.viewTacticsSkillDamageR[2][n] * ((100 - SkillValue[1]) / 100));
							dm("後:"+member[n]);
						}
						if(tf.viewTacticsSkillDamageR[i][n] > 0){
							Max += tf.viewTacticsSkillDamageR[i][n];count++;
						}
						member[n] += tf.viewTacticsSkillDamageR[0][n];dm("0:"+member[n]);
						member[n] += tf.viewTacticsSkillDamageR[1][n];dm("1:"+member[n]);
						member[n] += tf.viewTacticsSkillDamageR[2][n];dm("2:"+member[n]);
					}
				}
				if(tf.rightWall > 0){
					if(tf.rightWall > Max){
						tf.rightWall -= Max;
						for(var n=0;n<6;n++){member[n] = 0;}
					}else{
						var tmp = (int)(tf.rightWall / count);
						for(var n=0;n<6;n++){
							if(member[n] > 0){member[n] -= tmp;tf.rightWall=0;}
						}
					}
				}
				for(var n=0;n<6;n++){
					if(member[n] > 0){tf.rightParty[n].HP.now -= member[n];}
					if(tf.rightParty[n].HP.now < 0){tf.rightParty[n].HP.now = 0;}
				}

				//バリア効果(左)
				var Max;
				var count;
				var member = [];
				for(var n=0;n<6;n++){
					if(tf.leftParty[n].id != 0 && tf.leftParty[n].HP.now > 0){
						var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','left');
						dm("L."+tf.leftParty[n].unitName+".巨大体躯:"+SkillValue[0]+"/巨大値="+SkillValue[1]);
						if(SkillValue[0] == 1){
							if(SkillValue[1] > 80){SkillValue[1] = 80;}
							tf.viewTacticsSkillDamageL[0][n] = (int)(tf.viewTacticsSkillDamageL[0][n] * ((100 - SkillValue[1]) / 100));
							tf.viewTacticsSkillDamageL[1][n] = (int)(tf.viewTacticsSkillDamageL[1][n] * ((100 - SkillValue[1]) / 100));
							tf.viewTacticsSkillDamageL[2][n] = (int)(tf.viewTacticsSkillDamageL[2][n] * ((100 - SkillValue[1]) / 100));
						}
						if(tf.viewTacticsSkillDamageL[i][n] > 0){
							Max += tf.viewTacticsSkillDamageL[i][n];count++;
						}
						member[n] += tf.viewTacticsSkillDamageL[0][n];dm("0:"+member[n]);
						member[n] += tf.viewTacticsSkillDamageL[1][n];dm("1:"+member[n]);
						member[n] += tf.viewTacticsSkillDamageL[2][n];dm("2:"+member[n]);
					}
				}
				if(tf.leftWall > 0){
					if(tf.leftWall > Max){
						tf.leftWall -= Max;
						for(var n=0;n<6;n++){member[n] = 0;}
					}else{
						var tmp = (int)(tf.leftWall / count);
						for(var n=0;n<6;n++){
							if(member[n] > 0){member[n] -= tmp;tf.leftWall=0;}
						}
					}
				}
				for(var n=0;n<6;n++){
					if(member[n] > 0){tf.leftParty[n].HP.now -= member[n];}
					if(tf.leftParty[n].HP.now < 0){tf.leftParty[n].HP.now = 0;}
				}
			}

			if(skills.contents[i].type == '蘇生' || skills.contents[i].type == '回復'){
				if(skills.contents[i].target == '自軍単体'){
					for(var n=0;n<6;n++){
						if(target2 == n){
							calcInit(side,i,n,a);
							dm(attack[n].unitName+"/No:"+n);
							if(side == 'L'){
								if((skills.contents[i].type == '蘇生' || attack[n].HP.now > 0) && attack[n].id != 0 && attack[n].curse == 0){
									tf.viewTacticsSkillRecoveryL[i][n] = calc.tacticsSkillResurrection(pow,level,powRevise,def,lnd,band,block);
									var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','left');
									if(SkillValue[0] == 1){
										if(SkillValue[1] > 80){SkillValue[1] = 80;}
										tf.viewTacticsSkillRecoveryL[i][n] -= (int)(tf.viewTacticsSkillRecoveryL[i][n] * ((100 - SkillValue[1]) / 100));
									}
									attack[n].HP.now += tf.viewTacticsSkillRecoveryL[i][n];
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
								}
							}else{
								if((skills.contents[i].type == '蘇生' || attack[n].HP.now > 0) && attack[n].id != 0 && attack[n].curse == 0){
									tf.viewTacticsSkillRecoveryR[i][n] = calc.tacticsSkillResurrection(pow,level,powRevise,def,lnd,band,block);
									var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','right');
									if(SkillValue[0] == 1){
										if(SkillValue[1] > 80){SkillValue[1] = 80;}
										tf.viewTacticsSkillRecoveryR[i][n] -= (int)(tf.viewTacticsSkillRecoveryR[i][n] * ((100 - SkillValue[1]) / 100));
									}
									attack[n].HP.now += tf.viewTacticsSkillRecoveryR[i][n];
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍一列'){
					var count = 0;
					if(side == 'R'){for(var k=0;k<3;k++){if(tf.leftParty[k].id  == 0 || tf.leftParty[k].HP.now  < 1){count++;dm("Rcount="+count);}}}
					if(side == 'L'){for(var k=0;k<3;k++){if(tf.rightParty[k].id == 0 ||tf.rightParty[k].HP.now  < 1){count++;dm("Lcount="+count);}}}
					if(count == 3){count = 3;}else{count = 0;}
					for(var n=count;n<count+3;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							if((skills.contents[i].type == '蘇生' || attack[n].HP.now > 0) && attack[n].id != 0 && attack[n].curse == 0){
								tf.viewTacticsSkillRecoveryL[i][n] = calc.tacticsSkillResurrection(pow,level,powRevise,def,lnd,band,block);
								var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','left');
								if(SkillValue[0] == 1){
									if(SkillValue[1] > 80){SkillValue[1] = 80;}
									tf.viewTacticsSkillRecoveryL[i][n] -= (int)(tf.viewTacticsSkillRecoveryL[i][n] * ((100 - SkillValue[1]) / 100));
								}
								attack[n].HP.now += tf.viewTacticsSkillRecoveryL[i][n];
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
							}
						}else{
							if((skills.contents[i].type == '蘇生' || attack[n].HP.now > 0) && attack[n].id != 0 && attack[n].curse == 0){
								tf.viewTacticsSkillRecoveryR[i][n] = calc.tacticsSkillResurrection(pow,level,powRevise,def,lnd,band,block);
								var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','right');
								if(SkillValue[0] == 1){
									if(SkillValue[1] > 80){SkillValue[1] = 80;}
									tf.viewTacticsSkillRecoveryR[i][n] -= (int)(tf.viewTacticsSkillRecoveryR[i][n] * ((100 - SkillValue[1]) / 100));
								}
								attack[n].HP.now += tf.viewTacticsSkillRecoveryR[i][n];
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍全体'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							if((skills.contents[i].type == '蘇生' || attack[n].HP.now > 0) && attack[n].id != 0 && attack[n].curse == 0){
								tf.viewTacticsSkillRecoveryL[i][n] = calc.tacticsSkillResurrection(pow,level,powRevise,def,lnd,band,block);
								var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','left');
								if(SkillValue[0] == 1){
									if(SkillValue[1] > 80){SkillValue[1] = 80;}
									tf.viewTacticsSkillRecoveryL[i][n] -= (int)(tf.viewTacticsSkillRecoveryL[i][n] * ((100 - SkillValue[1]) / 100));
								}
								attack[n].HP.now += tf.viewTacticsSkillRecoveryL[i][n];
								tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
							}
						}else{
							if((skills.contents[i].type == '蘇生' || attack[n].HP.now > 0) && attack[n].id != 0 && attack[n].curse == 0){
								tf.viewTacticsSkillRecoveryR[i][n] = calc.tacticsSkillResurrection(pow,level,powRevise,def,lnd,band,block);
								var SkillValue = battleFuncSkillSet.searchSkill(n,'巨大体躯','right');
								if(SkillValue[0] == 1){
									if(SkillValue[1] > 80){SkillValue[1] = 80;}
									tf.viewTacticsSkillRecoveryR[i][n] -= (int)(tf.viewTacticsSkillRecoveryR[i][n] * ((100 - SkillValue[1]) / 100));
								}
								attack[n].HP.now += tf.viewTacticsSkillRecoveryR[i][n];
								tf.viewTacticsSkillEffct[i][n] = 1;
dm("viewTacticsSkillEffct["+i+"]["+n+"]"+tf.viewTacticsSkillEffct[i][n]);
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '城壁破壊'){
				if(skills.contents[i].target == '敵軍城壁'){
					calcInit(side,i,0,a);
					if(side == 'R'){
						tf.leftLndp = calc.tacticsSkillWallClash(pow,level,powRevise,lnd,band,block);
						tf.leftLnd  -= tf.leftLndp;
						if(tf.leftLnd < 0){tf.leftLnd = 0;}
					}else{
						tf.rightLndp = calc.tacticsSkillWallClash(pow,level,powRevise,lnd,band,block);
						tf.rightLnd -= tf.rightLndp;
						if(tf.rightLnd < 0){tf.rightLnd = 0;}
					}
				}
				if(skills.contents[i].target == '自軍城壁'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.leftLndp  = calc.tacticsSkillWallClash(pow,level,powRevise);
						tf.leftLnd  -= tf.leftLndp;
						if(tf.leftLnd < 0){tf.leftLnd = 0;}
					}else{
						tf.rightLndp = calc.tacticsSkillWallClash(pow,level,powRevise);
						tf.rightLnd -= tf.rightLndp;
						if(tf.rightLnd < 0){tf.rightLnd = 0;}
					}
				}
			}

			if(skills.contents[i].type == '城壁修復'){
				if(skills.contents[i].target == '敵軍城壁'){
					calcInit(side,i,0,a);
					if(side == 'R'){
						tf.leftLndp  = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.leftLnd  += tf.leftLndp;
						if(tf.leftLnd > tf.leftLndM){tf.leftLnd = tf.leftLndM;}
					}else{
						tf.rightLndp = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.rightLnd += tf.rightLndp;
						if(tf.rightLnd > tf.rightLndM){tf.rightLnd = tf.rightLndM;}
					}
				}
				if(skills.contents[i].target == '自軍城壁'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.leftLndp  = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.leftLnd  += tf.leftLndp;
						if(tf.leftLnd > tf.leftLndM){tf.leftLnd = tf.leftLndM;}
					}else{
						tf.rightLndp = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.rightLnd += tf.rightLndp;
						if(tf.rightLnd > tf.rightLndM){tf.rightLnd = tf.rightLndM;}
					}
				}
			}

			if(skills.contents[i].type == '城壁拡張'){
				if(skills.contents[i].target == '敵軍城壁'){
					calcInit(side,i,0,a);
					if(side == 'R'){
						tf.leftLndp = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.leftLnd += tf.leftLndp;
						tf.leftLndM = tf.leftLnd;
					}else{
						tf.rightLndp = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.rightLnd += tf.rightLndp;
						tf.rightLndM = tf.rightLnd;
					}
				}
				if(skills.contents[i].target == '自軍城壁'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.leftLndp = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.leftLnd += tf.leftLndp;
						tf.leftLndM = tf.leftLnd;
					}else{
						tf.rightLndp = calc.tacticsSkillWallRestore(pow,level,powRevise);
						tf.rightLnd += tf.rightLndp;
						tf.rightLndM = tf.rightLnd;
					}
				}
			}

			if(skills.contents[i].type == '強POW'   || skills.contents[i].type == '強ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.PowUpRTmp = tf.PowUpR;
						if(tf.PowUpRTmp < pow){
							tf.PowUpR = pow;
							tf.tacticsSkillCountR.add('攻U');
						}
					}else{
						tf.PowUpLTmp = tf.PowUpL;
						if(tf.PowUpLTmp < pow){
							tf.PowUpL = pow;
							tf.tacticsSkillCountL.add('攻U');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.PowUpLTmp = tf.PowUpL;
						if(tf.PowUpLTmp < pow){
							tf.PowUpL = pow;
							tf.tacticsSkillCountL.add('攻U');
						}
					}else{
						tf.PowUpRTmp = tf.PowUpR;
						if(tf.PowUpRTmp < pow){
							tf.PowUpR = pow;
							tf.tacticsSkillCountR.add('攻U');
						}
					}
				}
			}

			if(skills.contents[i].type == '強DEF'   || skills.contents[i].type == '強ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.DefUpRTmp = tf.DefUpR;
						if(tf.DefUpRTmp < pow){
							tf.DefUpR = pow;
							tf.tacticsSkillCountR.add('防U');
						}
					}else{
						tf.DefUpLTmp = tf.DefUpL;
						if(tf.DefUpLTmp < pow){
							tf.DefUpL = pow;
							tf.tacticsSkillCountL.add('防U');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.DefUpLTmp = tf.DefUpL;
						if(tf.DefUpLTmp < pow){
							tf.DefUpL = pow;
							tf.tacticsSkillCountL.add('防U');
						}
					}else{
						tf.DefUpRTmp = tf.DefUpR;
						if(tf.DefUpRTmp < pow){
							tf.DefUpR = pow;
							tf.tacticsSkillCountR.add('防U');
						}
					}
				}
			}

			if(skills.contents[i].type == '強SPD'   || skills.contents[i].type == '強ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.SpdUpRTmp = tf.SpdUpR;
						if(tf.SpdUpRTmp < pow){
							tf.SpdUpR = pow;
							tf.tacticsSkillCountR.add('速U');
						}
					}else{
						tf.SpdUpLTmp = tf.SpdUpL;
						if(tf.SpdUpLTmp < pow){
							tf.SpdUpL = pow;
							tf.tacticsSkillCountL.add('速U');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.SpdUpLTmp = tf.SpdUpL;
						if(tf.SpdUpLTmp < pow){
							tf.SpdUpL = pow;
							tf.tacticsSkillCountL.add('速U');
						}
					}else{
						tf.SpdUpRTmp = tf.SpdUpR;
						if(tf.SpdUpRTmp < pow){
							tf.SpdUpR = pow;
							tf.tacticsSkillCountR.add('速U');
						}
					}
				}
			}

			if(skills.contents[i].type == '強MOR'   || skills.contents[i].type == '強ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.MorUpRTmp = tf.MorUpR;
						if(tf.SpdUpRTmp < pow){
							tf.MorUpR = pow;
							tf.tacticsSkillCountR.add('士U');
						}
					}else{
						tf.MorUpLTmp = tf.MorUpL;
						if(tf.MorUpLTmp < pow){
							tf.MorUpL = pow;
							tf.tacticsSkillCountL.add('士U');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.MorUpLTmp = tf.MorUpL;
						if(tf.MorUpLTmp < pow){
							tf.MorUpL = pow;
							tf.tacticsSkillCountL.add('士U');
						}
					}else{
						tf.MorUpRTmp = tf.MorUpR;
						if(tf.MorUpRTmp < pow){
							tf.MorUpR = pow;
							tf.tacticsSkillCountR.add('士U');
						}
					}
				}
			}

			if(skills.contents[i].type == '弱POW'   || skills.contents[i].type == '弱ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.PowDownRTmp = tf.PowDownR;
						if(tf.PowDownRTmp < pow){
							tf.PowDownR = pow;
							tf.tacticsSkillCountR.add('攻D');
						}
					}else{
						tf.PowDownLTmp = tf.PowDownL;
						if(tf.PowDownLTmp < pow){
							tf.PowDownL = pow;
							tf.tacticsSkillCountL.add('攻D');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.PowDownLTmp = tf.PowDownL;
						if(tf.PowDownLTmp < pow){
							tf.PowDownL = pow;
							tf.tacticsSkillCountL.add('攻D');
						}
					}else{
						tf.PowDownRTmp = tf.PowDownR;
						if(tf.PowDownRTmp < pow){
							tf.PowDownR = pow;
							tf.tacticsSkillCountR.add('攻D');
						}
					}
				}
			}
			if(skills.contents[i].type == '弱DEF'   || skills.contents[i].type == '弱ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.DefDownRTmp = tf.DefDownR;
						if(tf.DefDownRTmp < pow){
							tf.DefDownR = pow;
							tf.tacticsSkillCountR.add('防D');
						}
					}else{
						tf.DefDownLTmp = tf.DefDownL;
						if(tf.DefDownLTmp < pow){
							tf.DefDownL = pow;
							tf.tacticsSkillCountL.add('防D');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.DefDownLTmp = tf.DefDownL;
						if(tf.DefDownLTmp < pow){
							tf.DefDownL = pow;
							tf.tacticsSkillCountL.add('防D');
						}
					}else{
						tf.DefDownRTmp = tf.DefDownR;
						if(tf.DefDownRTmp < pow){
							tf.DefDownR = pow;
							tf.tacticsSkillCountR.add('防D');
						}
					}
				}
			}
			if(skills.contents[i].type == '弱SPD'   || skills.contents[i].type == '弱ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.SpdDownRTmp = tf.SpdDownR;
						if(tf.SpdDownRTmp < pow){
							tf.SpdDownR = pow;
							tf.tacticsSkillCountR.add('速D');
						}
					}else{
						tf.SpdDownLTmp = tf.SpdDownL;
						if(tf.SpdDownLTmp < pow){
							tf.SpdDownL = pow;
							tf.tacticsSkillCountL.add('速D');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.SpdDownLTmp = tf.SpdDownL;
						if(tf.SpdDownLTmp < pow){
							tf.SpdDownL = pow;
							tf.tacticsSkillCountL.add('速D');
						}
					}else{
						tf.SpdDownRTmp = tf.SpdDownR;
						if(tf.SpdDownRTmp < pow){
							tf.SpdDownR = pow;
							tf.tacticsSkillCountR.add('速D');
						}
					}
				}
			}
			if(skills.contents[i].type == '弱MOR'   || skills.contents[i].type == '弱ALL'   ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.MorDownRTmp = tf.MorDownR;
						if(tf.MorDownRTmp < pow){
							tf.MorDownR = pow;
							tf.tacticsSkillCountR.add('士D');
						}
					}else{
						tf.MorDownLTmp = tf.MorDownL;
						if(tf.MorDownLTmp < pow){
							tf.MorDownL = pow;
							tf.tacticsSkillCountL.add('士D');
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.MorDownLTmp = tf.MorDownL;
						if(tf.PowDownRTmp < pow){
							tf.MorDownL = pow;
							tf.tacticsSkillCountL.add('士D');
						}
					}else{
						tf.MorDownLTmp = tf.MorDownL;
						if(tf.MorDownLTmp < pow){
							tf.MorDownL = pow;
							tf.tacticsSkillCountR.add('士D');
						}
					}
				}
			}

			if(skills.contents[i].type == 'バリア'  ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.BarrierR = calc.tacticsSkillBarrier(pow,level,powRevise);
						if(tf.rightWall < tf.BarrierR){
							tf.rightWall = tf.BarrierR;
						}
					}else{
						tf.BarrierL = calc.tacticsSkillBarrier(pow,level,powRevise);
						if(tf.leftWall < tf.BarrierL){
							tf.leftWall = tf.BarrierL;
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.BarrierL = calc.tacticsSkillBarrier(pow,level,powRevise);
						if(tf.leftWall < tf.BarrierL){
							tf.leftWall = tf.BarrierL;
						}
					}else{
						tf.BarrierR = calc.tacticsSkillBarrier(pow,level,powRevise);
						if(tf.rightWall < tf.BarrierR){
							tf.rightWall = tf.BarrierR;
						}
					}
				}
			}
dm("壁"+tf.leftWall);

			if(skills.contents[i].type == 'FP増加'  ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.rightFor += pow;
						if(tf.rightFor > 999){tf.rightFor = 999;}
					}else{
						tf.leftFor  += pow;
						if(tf.leftFor > 999){tf.leftFor = 999;}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.leftFor  += pow;
						if(tf.leftFor > 999){tf.leftFor = 999;}
					}else{
						tf.rightFor += pow;
						if(tf.rightFor > 999){tf.rightFor = 999;}
					}
				}
			}
			if(skills.contents[i].type == 'FP減少'  ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.rightFor -= pow;
						if(tf.rightFor < 0){tf.rightFor = 0;}
					}else{
						tf.leftFor  -= pow;
						if(tf.leftFor  < 0){tf.leftFor = 0;}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.leftFor  -= pow;
						if(tf.leftFor  < 0){tf.leftFor = 0;}
					}else{
						tf.rightFor -= pow;
						if(tf.rightFor < 0){tf.rightFor = 0;}
					}
				}
			}
			if(skills.contents[i].type == 'FP吸収'  ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.rightFor -= pow;
						tf.leftFor  += pow;
						if(tf.rightFor <   0){tf.rightFor =   0;}
						if(tf.leftFor  > 999){tf.leftFor  = 999;}
					}else{
						tf.leftFor  -= pow;
						tf.rightFor += pow;
						if(tf.leftFor  <   0){tf.leftFor  =   0;}
						if(tf.rightFor > 999){tf.rightFor = 999;}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.leftFor  -= pow;
						tf.rightFor += pow;
						if(tf.leftFor  <   0){tf.leftFor  =   0;}
						if(tf.rightFor > 999){tf.rightFor = 999;}
					}else{
						tf.rightFor -= pow;
						tf.leftFor  += pow;
						if(tf.rightFor <   0){tf.rightFor =   0;}
						if(tf.leftFor  > 999){tf.leftFor  = 999;}
					}
				}
			}

			if(skills.contents[i].type == '男性特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.男TMP = tf.tacticsSkillspecialityR.男;
							if(tf.tacticsSkillspecialityR.男TMP < pow){
								tf.tacticsSkillspecialityR.男 = pow;
								pow = tf.tacticsSkillspecialityR.男 - tf.tacticsSkillspecialityR.男TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('男');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.男TMP = tf.tacticsSkillspecialityL.男;
							if(tf.tacticsSkillspecialityL.男TMP < pow){
								tf.tacticsSkillspecialityL.男 = pow;
								pow = tf.tacticsSkillspecialityL.男 - tf.tacticsSkillspecialityL.男TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('男');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.男TMP = tf.tacticsSkillspecialityL.男;
							if(tf.tacticsSkillspecialityL.男TMP < pow){
								tf.tacticsSkillspecialityL.男 = pow;
								pow = tf.tacticsSkillspecialityL.男 - tf.tacticsSkillspecialityL.男TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('男');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.男TMP = tf.tacticsSkillspecialityR.男;
							if(tf.tacticsSkillspecialityR.男TMP < pow){
								tf.tacticsSkillspecialityR.男 = pow;
								pow = tf.tacticsSkillspecialityR.男 - tf.tacticsSkillspecialityR.男TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('男');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '女性特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.女TMP = tf.tacticsSkillspecialityR.女;
							if(tf.tacticsSkillspecialityR.女TMP < pow){
								tf.tacticsSkillspecialityR.女 = pow;
								pow = tf.tacticsSkillspecialityR.女 - tf.tacticsSkillspecialityR.女TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('女');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.女TMP = tf.tacticsSkillspecialityL.女;
							if(tf.tacticsSkillspecialityL.女TMP < pow){
								tf.tacticsSkillspecialityL.女 = pow;
								pow = tf.tacticsSkillspecialityL.女 - tf.tacticsSkillspecialityL.女TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('女');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.女TMP = tf.tacticsSkillspecialityL.女;
							if(tf.tacticsSkillspecialityL.女TMP < pow){
								tf.tacticsSkillspecialityL.女 = pow;
								pow = tf.tacticsSkillspecialityL.女 - tf.tacticsSkillspecialityL.女TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('女');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.女TMP = tf.tacticsSkillspecialityR.女;
							if(tf.tacticsSkillspecialityR.女TMP < pow){
								tf.tacticsSkillspecialityR.女 = pow;
								pow = tf.tacticsSkillspecialityR.女 - tf.tacticsSkillspecialityR.女TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('女');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '人間特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.人TMP = tf.tacticsSkillspecialityR.人;
							if(tf.tacticsSkillspecialityR.人TMP < pow){
								tf.tacticsSkillspecialityR.人 = pow;
								pow = tf.tacticsSkillspecialityR.人 - tf.tacticsSkillspecialityR.人TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('人');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.人TMP = tf.tacticsSkillspecialityL.人;
							if(tf.tacticsSkillspecialityL.人TMP < pow){
								tf.tacticsSkillspecialityL.人 = pow;
								pow = tf.tacticsSkillspecialityL.人 - tf.tacticsSkillspecialityL.人TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('人');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.人TMP = tf.tacticsSkillspecialityL.人;
							if(tf.tacticsSkillspecialityL.人TMP < pow){
								tf.tacticsSkillspecialityL.人 = pow;
								pow = tf.tacticsSkillspecialityL.人 - tf.tacticsSkillspecialityL.人TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('人');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.人TMP = tf.tacticsSkillspecialityR.人;
							if(tf.tacticsSkillspecialityR.人TMP < pow){
								tf.tacticsSkillspecialityR.人 = pow;
								pow = tf.tacticsSkillspecialityR.人 - tf.tacticsSkillspecialityR.人TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('人');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '魔族特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.魔TMP = tf.tacticsSkillspecialityR.魔;
							if(tf.tacticsSkillspecialityR.魔TMP < pow){
								tf.tacticsSkillspecialityR.魔 = pow;
								pow = tf.tacticsSkillspecialityR.魔 - tf.tacticsSkillspecialityR.魔TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('魔');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.魔TMP = tf.tacticsSkillspecialityL.魔;
							if(tf.tacticsSkillspecialityL.魔TMP < pow){
								tf.tacticsSkillspecialityL.魔 = pow;
								pow = tf.tacticsSkillspecialityL.魔 - tf.tacticsSkillspecialityL.魔TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('魔');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.魔TMP = tf.tacticsSkillspecialityL.魔;
							if(tf.tacticsSkillspecialityL.魔TMP < pow){
								tf.tacticsSkillspecialityL.魔 = pow;
								pow = tf.tacticsSkillspecialityL.魔 - tf.tacticsSkillspecialityL.魔TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('魔');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.魔TMP = tf.tacticsSkillspecialityR.魔;
							if(tf.tacticsSkillspecialityR.魔TMP < pow){
								tf.tacticsSkillspecialityR.魔 = pow;
								pow = tf.tacticsSkillspecialityR.魔 - tf.tacticsSkillspecialityR.魔TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('魔');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '神族特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.神TMP = tf.tacticsSkillspecialityR.神;
							if(tf.tacticsSkillspecialityR.神TMP < pow){
								tf.tacticsSkillspecialityR.神 = pow;
								pow = tf.tacticsSkillspecialityR.神 - tf.tacticsSkillspecialityR.神TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('神');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.神TMP = tf.tacticsSkillspecialityL.神;
							if(tf.tacticsSkillspecialityL.神TMP < pow){
								tf.tacticsSkillspecialityL.神 = pow;
								pow = tf.tacticsSkillspecialityL.神 - tf.tacticsSkillspecialityL.神TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('神');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.神TMP = tf.tacticsSkillspecialityL.神;
							if(tf.tacticsSkillspecialityL.神TMP < pow){
								tf.tacticsSkillspecialityL.神 = pow;
								pow = tf.tacticsSkillspecialityL.神 - tf.tacticsSkillspecialityL.神TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('神');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.神TMP = tf.tacticsSkillspecialityR.神;
							if(tf.tacticsSkillspecialityR.神TMP < pow){
								tf.tacticsSkillspecialityR.神 = pow;
								pow = tf.tacticsSkillspecialityR.神 - tf.tacticsSkillspecialityR.神TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('神');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '聖職特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.聖TMP = tf.tacticsSkillspecialityR.聖;
							if(tf.tacticsSkillspecialityR.聖TMP < pow){
								tf.tacticsSkillspecialityR.聖 = pow;
								pow = tf.tacticsSkillspecialityR.聖 - tf.tacticsSkillspecialityR.聖TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('聖');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.聖TMP = tf.tacticsSkillspecialityL.聖;
							if(tf.tacticsSkillspecialityL.聖TMP < pow){
								tf.tacticsSkillspecialityL.聖 = pow;
								pow = tf.tacticsSkillspecialityL.聖 - tf.tacticsSkillspecialityL.聖TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('聖');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.聖TMP = tf.tacticsSkillspecialityL.聖;
							if(tf.tacticsSkillspecialityL.聖TMP < pow){
								tf.tacticsSkillspecialityL.聖 = pow;
								pow = tf.tacticsSkillspecialityL.聖 - tf.tacticsSkillspecialityL.聖TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('聖');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.聖TMP = tf.tacticsSkillspecialityR.聖;
							if(tf.tacticsSkillspecialityR.聖TMP < pow){
								tf.tacticsSkillspecialityR.聖 = pow;
								pow = tf.tacticsSkillspecialityR.聖 - tf.tacticsSkillspecialityR.聖TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('聖');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '器兵特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.器TMP = tf.tacticsSkillspecialityR.器;
							if(tf.tacticsSkillspecialityR.器TMP < pow){
								tf.tacticsSkillspecialityR.器 = pow;
								pow = tf.tacticsSkillspecialityR.器 - tf.tacticsSkillspecialityR.器TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('器');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.器TMP = tf.tacticsSkillspecialityL.器;
							if(tf.tacticsSkillspecialityL.器TMP < pow){
								tf.tacticsSkillspecialityL.器 = pow;
								pow = tf.tacticsSkillspecialityL.器 - tf.tacticsSkillspecialityL.器TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('器');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.器TMP = tf.tacticsSkillspecialityL.器;
							if(tf.tacticsSkillspecialityL.器TMP < pow){
								tf.tacticsSkillspecialityL.器 = pow;
								pow = tf.tacticsSkillspecialityL.器 - tf.tacticsSkillspecialityL.器TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('器');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.器TMP = tf.tacticsSkillspecialityR.器;
							if(tf.tacticsSkillspecialityR.器TMP < pow){
								tf.tacticsSkillspecialityR.器 = pow;
								pow = tf.tacticsSkillspecialityR.器 - tf.tacticsSkillspecialityR.器TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('器');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '竜族特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.竜TMP = tf.tacticsSkillspecialityR.竜;
							if(tf.tacticsSkillspecialityR.竜TMP < pow){
								tf.tacticsSkillspecialityR.竜 = pow;
								pow = tf.tacticsSkillspecialityR.竜 - tf.tacticsSkillspecialityR.竜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('竜');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.竜TMP = tf.tacticsSkillspecialityL.竜;
							if(tf.tacticsSkillspecialityL.竜TMP < pow){
								tf.tacticsSkillspecialityL.竜 = pow;
								pow = tf.tacticsSkillspecialityL.竜 - tf.tacticsSkillspecialityL.竜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('竜');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.竜TMP = tf.tacticsSkillspecialityL.竜;
							if(tf.tacticsSkillspecialityL.竜TMP < pow){
								tf.tacticsSkillspecialityL.竜 = pow;
								pow = tf.tacticsSkillspecialityL.竜 - tf.tacticsSkillspecialityL.竜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('竜');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.竜TMP = tf.tacticsSkillspecialityR.竜;
							if(tf.tacticsSkillspecialityR.竜TMP < pow){
								tf.tacticsSkillspecialityR.竜 = pow;
								pow = tf.tacticsSkillspecialityR.竜 - tf.tacticsSkillspecialityR.竜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('竜');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '魔獣特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.獣TMP = tf.tacticsSkillspecialityR.獣;
							if(tf.tacticsSkillspecialityR.獣TMP < pow){
								tf.tacticsSkillspecialityR.獣 = pow;
								pow = tf.tacticsSkillspecialityR.獣 - tf.tacticsSkillspecialityR.獣TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('獣');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.獣TMP = tf.tacticsSkillspecialityL.獣;
							if(tf.tacticsSkillspecialityL.獣TMP < pow){
								tf.tacticsSkillspecialityL.獣 = pow;
								pow = tf.tacticsSkillspecialityL.獣 - tf.tacticsSkillspecialityL.獣TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('獣');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.獣TMP = tf.tacticsSkillspecialityL.獣;
							if(tf.tacticsSkillspecialityL.獣TMP < pow){
								tf.tacticsSkillspecialityL.獣 = pow;
								pow = tf.tacticsSkillspecialityL.獣 - tf.tacticsSkillspecialityL.獣TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('獣');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.獣TMP = tf.tacticsSkillspecialityR.獣;
							if(tf.tacticsSkillspecialityR.獣TMP < pow){
								tf.tacticsSkillspecialityR.獣 = pow;
								pow = tf.tacticsSkillspecialityR.獣 - tf.tacticsSkillspecialityR.獣TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('獣');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '水棲特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.海TMP = tf.tacticsSkillspecialityR.海;
							if(tf.tacticsSkillspecialityR.海TMP < pow){
								tf.tacticsSkillspecialityR.海 = pow;
								pow = tf.tacticsSkillspecialityR.海 - tf.tacticsSkillspecialityR.海TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('海');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.海TMP = tf.tacticsSkillspecialityL.海;
							if(tf.tacticsSkillspecialityL.海TMP < pow){
								tf.tacticsSkillspecialityL.海 = pow;
								pow = tf.tacticsSkillspecialityL.海 - tf.tacticsSkillspecialityL.海TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('海');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.海TMP = tf.tacticsSkillspecialityL.海;
							if(tf.tacticsSkillspecialityL.海TMP < pow){
								tf.tacticsSkillspecialityL.海 = pow;
								pow = tf.tacticsSkillspecialityL.海 - tf.tacticsSkillspecialityL.海TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('海');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.海TMP = tf.tacticsSkillspecialityR.海;
							if(tf.tacticsSkillspecialityR.海TMP < pow){
								tf.tacticsSkillspecialityR.海 = pow;
								pow = tf.tacticsSkillspecialityR.海 - tf.tacticsSkillspecialityR.海TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('海');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '飛行特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.飛TMP = tf.tacticsSkillspecialityR.飛;
							if(tf.tacticsSkillspecialityR.飛TMP < pow){
								tf.tacticsSkillspecialityR.飛 = pow;
								pow = tf.tacticsSkillspecialityR.飛 - tf.tacticsSkillspecialityR.飛TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('飛');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.飛TMP = tf.tacticsSkillspecialityL.飛;
							if(tf.tacticsSkillspecialityL.飛TMP < pow){
								tf.tacticsSkillspecialityL.飛 = pow;
								pow = tf.tacticsSkillspecialityL.飛 - tf.tacticsSkillspecialityL.飛TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('飛');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.飛TMP = tf.tacticsSkillspecialityL.飛;
							if(tf.tacticsSkillspecialityL.飛TMP < pow){
								tf.tacticsSkillspecialityL.飛 = pow;
								pow = tf.tacticsSkillspecialityL.飛 - tf.tacticsSkillspecialityL.飛TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('飛');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.飛TMP = tf.tacticsSkillspecialityR.飛;
							if(tf.tacticsSkillspecialityR.飛TMP < pow){
								tf.tacticsSkillspecialityR.飛 = pow;
								pow = tf.tacticsSkillspecialityR.飛 - tf.tacticsSkillspecialityR.飛TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('飛');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '火霊特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.火TMP = tf.tacticsSkillspecialityR.火;
							if(tf.tacticsSkillspecialityR.火TMP < pow){
								tf.tacticsSkillspecialityR.火 = pow;
								pow = tf.tacticsSkillspecialityR.火 - tf.tacticsSkillspecialityR.火TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('火');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.火TMP = tf.tacticsSkillspecialityL.火;
							if(tf.tacticsSkillspecialityL.火TMP < pow){
								tf.tacticsSkillspecialityL.火 = pow;
								pow = tf.tacticsSkillspecialityL.火 - tf.tacticsSkillspecialityL.火TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('火');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.火TMP = tf.tacticsSkillspecialityL.火;
							if(tf.tacticsSkillspecialityL.火TMP < pow){
								tf.tacticsSkillspecialityL.火 = pow;
								pow = tf.tacticsSkillspecialityL.火 - tf.tacticsSkillspecialityL.火TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('火');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.火TMP = tf.tacticsSkillspecialityR.火;
							if(tf.tacticsSkillspecialityR.火TMP < pow){
								tf.tacticsSkillspecialityR.火 = pow;
								pow = tf.tacticsSkillspecialityR.火 - tf.tacticsSkillspecialityR.火TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('火');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '氷霊特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.氷TMP = tf.tacticsSkillspecialityR.氷;
							if(tf.tacticsSkillspecialityR.氷TMP < pow){
								tf.tacticsSkillspecialityR.氷 = pow;
								pow = tf.tacticsSkillspecialityR.氷 - tf.tacticsSkillspecialityR.氷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('氷');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.氷TMP = tf.tacticsSkillspecialityL.氷;
							if(tf.tacticsSkillspecialityL.氷TMP < pow){
								tf.tacticsSkillspecialityL.氷 = pow;
								pow = tf.tacticsSkillspecialityL.氷 - tf.tacticsSkillspecialityL.氷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('氷');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.氷TMP = tf.tacticsSkillspecialityL.氷;
							if(tf.tacticsSkillspecialityL.氷TMP < pow){
								tf.tacticsSkillspecialityL.氷 = pow;
								pow = tf.tacticsSkillspecialityL.氷 - tf.tacticsSkillspecialityL.氷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('氷');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.氷TMP = tf.tacticsSkillspecialityR.氷;
							if(tf.tacticsSkillspecialityR.氷TMP < pow){
								tf.tacticsSkillspecialityR.氷 = pow;
								pow = tf.tacticsSkillspecialityR.氷 - tf.tacticsSkillspecialityR.氷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('氷');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '雷霊特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.雷TMP = tf.tacticsSkillspecialityR.雷;
							if(tf.tacticsSkillspecialityR.雷TMP < pow){
								tf.tacticsSkillspecialityR.雷 = pow;
								pow = tf.tacticsSkillspecialityR.雷 - tf.tacticsSkillspecialityR.雷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('雷');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.雷TMP = tf.tacticsSkillspecialityL.雷;
							if(tf.tacticsSkillspecialityL.雷TMP < pow){
								tf.tacticsSkillspecialityL.雷 = pow;
								pow = tf.tacticsSkillspecialityL.雷 - tf.tacticsSkillspecialityL.雷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('雷');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.雷TMP = tf.tacticsSkillspecialityL.雷;
							if(tf.tacticsSkillspecialityL.雷TMP < pow){
								tf.tacticsSkillspecialityL.雷 = pow;
								pow = tf.tacticsSkillspecialityL.雷 - tf.tacticsSkillspecialityL.雷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('雷');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.雷TMP = tf.tacticsSkillspecialityR.雷;
							if(tf.tacticsSkillspecialityR.雷TMP < pow){
								tf.tacticsSkillspecialityR.雷 = pow;
								pow = tf.tacticsSkillspecialityR.雷 - tf.tacticsSkillspecialityR.雷TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('雷');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '樹霊特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.樹TMP = tf.tacticsSkillspecialityR.樹;
							if(tf.tacticsSkillspecialityR.樹TMP < pow){
								tf.tacticsSkillspecialityR.樹 = pow;
								pow = tf.tacticsSkillspecialityR.樹 - tf.tacticsSkillspecialityR.樹TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('樹');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.樹TMP = tf.tacticsSkillspecialityL.樹;
							if(tf.tacticsSkillspecialityL.樹TMP < pow){
								tf.tacticsSkillspecialityL.樹 = pow;
								pow = tf.tacticsSkillspecialityL.樹 - tf.tacticsSkillspecialityL.樹TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('樹');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.樹TMP = tf.tacticsSkillspecialityL.樹;
							if(tf.tacticsSkillspecialityL.樹TMP < pow){
								tf.tacticsSkillspecialityL.樹 = pow;
								pow = tf.tacticsSkillspecialityL.樹 - tf.tacticsSkillspecialityL.樹TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('樹');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.樹TMP = tf.tacticsSkillspecialityR.樹;
							if(tf.tacticsSkillspecialityR.樹TMP < pow){
								tf.tacticsSkillspecialityR.樹 = pow;
								pow = tf.tacticsSkillspecialityR.樹 - tf.tacticsSkillspecialityR.樹TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('樹');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '毒性特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.毒TMP = tf.tacticsSkillspecialityR.毒;
							if(tf.tacticsSkillspecialityR.毒TMP < pow){
								tf.tacticsSkillspecialityR.毒 = pow;
								pow = tf.tacticsSkillspecialityR.毒 - tf.tacticsSkillspecialityR.毒TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('毒');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.毒TMP = tf.tacticsSkillspecialityL.毒;
							if(tf.tacticsSkillspecialityL.毒TMP < pow){
								tf.tacticsSkillspecialityL.毒 = pow;
								pow = tf.tacticsSkillspecialityL.毒 - tf.tacticsSkillspecialityL.毒TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('毒');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.毒TMP = tf.tacticsSkillspecialityL.毒;
							if(tf.tacticsSkillspecialityL.毒TMP < pow){
								tf.tacticsSkillspecialityL.毒 = pow;
								pow = tf.tacticsSkillspecialityL.毒 - tf.tacticsSkillspecialityL.毒TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('毒');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.毒TMP = tf.tacticsSkillspecialityR.毒;
							if(tf.tacticsSkillspecialityR.毒TMP < pow){
								tf.tacticsSkillspecialityR.毒 = pow;
								pow = tf.tacticsSkillspecialityR.毒 - tf.tacticsSkillspecialityR.毒TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('毒');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '不死特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.死TMP = tf.tacticsSkillspecialityR.死;
							if(tf.tacticsSkillspecialityR.死TMP < pow){
								tf.tacticsSkillspecialityR.死 = pow;
								pow = tf.tacticsSkillspecialityR.死 - tf.tacticsSkillspecialityR.死TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('死');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.死TMP = tf.tacticsSkillspecialityL.死;
							if(tf.tacticsSkillspecialityL.死TMP < pow){
								tf.tacticsSkillspecialityL.死 = pow;
								pow = tf.tacticsSkillspecialityL.死 - tf.tacticsSkillspecialityL.死TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('死');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.死TMP = tf.tacticsSkillspecialityL.死;
							if(tf.tacticsSkillspecialityL.死TMP < pow){
								tf.tacticsSkillspecialityL.死 = pow;
								pow = tf.tacticsSkillspecialityL.死 - tf.tacticsSkillspecialityL.死TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('死');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.死TMP = tf.tacticsSkillspecialityR.死;
							if(tf.tacticsSkillspecialityR.死TMP < pow){
								tf.tacticsSkillspecialityR.死 = pow;
								pow = tf.tacticsSkillspecialityR.死 - tf.tacticsSkillspecialityR.死TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('死');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '騎士特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.騎TMP = tf.tacticsSkillspecialityR.騎;
							if(tf.tacticsSkillspecialityR.騎TMP < pow){
								tf.tacticsSkillspecialityR.騎 = pow;
								pow = tf.tacticsSkillspecialityR.騎 - tf.tacticsSkillspecialityR.騎TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('騎');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.騎TMP = tf.tacticsSkillspecialityL.騎;
							if(tf.tacticsSkillspecialityL.騎TMP < pow){
								tf.tacticsSkillspecialityL.騎 = pow;
								pow = tf.tacticsSkillspecialityL.騎 - tf.tacticsSkillspecialityL.騎TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('騎');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.騎TMP = tf.tacticsSkillspecialityL.騎;
							if(tf.tacticsSkillspecialityL.騎TMP < pow){
								tf.tacticsSkillspecialityL.騎 = pow;
								pow = tf.tacticsSkillspecialityL.騎 - tf.tacticsSkillspecialityL.騎TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('騎');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.騎TMP = tf.tacticsSkillspecialityR.騎;
							if(tf.tacticsSkillspecialityR.騎TMP < pow){
								tf.tacticsSkillspecialityR.騎 = pow;
								pow = tf.tacticsSkillspecialityR.騎 - tf.tacticsSkillspecialityR.騎TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('騎');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '夜行特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.夜TMP = tf.tacticsSkillspecialityR.夜;
							if(tf.tacticsSkillspecialityR.夜TMP < pow){
								tf.tacticsSkillspecialityR.夜 = pow;
								pow = tf.tacticsSkillspecialityR.夜 - tf.tacticsSkillspecialityR.夜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('夜');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.夜TMP = tf.tacticsSkillspecialityL.夜;
							if(tf.tacticsSkillspecialityL.夜TMP < pow){
								tf.tacticsSkillspecialityL.夜 = pow;
								pow = tf.tacticsSkillspecialityL.夜 - tf.tacticsSkillspecialityL.夜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('夜');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.夜TMP = tf.tacticsSkillspecialityL.夜;
							if(tf.tacticsSkillspecialityL.夜TMP < pow){
								tf.tacticsSkillspecialityL.夜 = pow;
								pow = tf.tacticsSkillspecialityL.夜 - tf.tacticsSkillspecialityL.夜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('夜');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.夜TMP = tf.tacticsSkillspecialityR.夜;
							if(tf.tacticsSkillspecialityR.夜TMP < pow){
								tf.tacticsSkillspecialityR.夜 = pow;
								pow = tf.tacticsSkillspecialityR.夜 - tf.tacticsSkillspecialityR.夜TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('夜');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '超越特攻'){
				if(skills.contents[i].target == '敵軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityR.超TMP = tf.tacticsSkillspecialityR.超;
							if(tf.tacticsSkillspecialityR.超TMP < pow){
								tf.tacticsSkillspecialityR.超 = pow;
								pow = tf.tacticsSkillspecialityR.超 - tf.tacticsSkillspecialityR.超TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('超');
								}
							}
						}else{
							tf.tacticsSkillspecialityL.超TMP = tf.tacticsSkillspecialityL.超;
							if(tf.tacticsSkillspecialityL.超TMP < pow){
								tf.tacticsSkillspecialityL.超 = pow;
								pow = tf.tacticsSkillspecialityL.超 - tf.tacticsSkillspecialityL.超TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('超');
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					for(var n=0;n<6;n++){
						calcInit(side,i,n,a);
						if(side == 'L'){
							tf.tacticsSkillspecialityL.超TMP = tf.tacticsSkillspecialityL.超;
							if(tf.tacticsSkillspecialityL.超TMP < pow){
								tf.tacticsSkillspecialityL.超 = pow;
								pow = tf.tacticsSkillspecialityL.超 - tf.tacticsSkillspecialityL.超TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountL.add('超');
								}
							}
						}else{
							tf.tacticsSkillspecialityR.超TMP = tf.tacticsSkillspecialityR.超;
							if(tf.tacticsSkillspecialityR.超TMP < pow){
								tf.tacticsSkillspecialityR.超 = pow;
								pow = tf.tacticsSkillspecialityR.超 - tf.tacticsSkillspecialityR.超TMP;
								for(var p=0;p<pow;p++){
									tf.tacticsSkillCountR.add('超');
								}
							}
						}
					}
				}
			}

			if(skills.contents[i].type == 'Ｒ増加'  ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						if(tf.rightMovMax < 10){
							tf.rightMov    += pow;
							tf.rightMovMax += pow;
							if(tf.rightMov    > 10){tf.rightMov    = 10;}
							if(tf.rightMovMax > 10){tf.rightMovMax = 10;}
						}
					}else{
						if(tf.leftMovMax < 10){
							tf.leftMov    += pow;
							tf.leftMovMax += pow;
							if(tf.leftMov    > 10){tf.leftMov     = 10;}
							if(tf.leftMovMax > 10){tf.leftMovMax  = 10;}
						}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						if(tf.leftMovMax < 10){
							tf.leftMov    += pow;
							tf.leftMovMax += pow;
							if(tf.leftMov    > 10){tf.leftMov     = 10;}
							if(tf.leftMovMax > 10){tf.leftMovMax  = 10;}
						}
					}else{
						if(tf.rightMovMax < 10){
							tf.rightMov    += pow;
							tf.rightMovMax += pow;
							if(tf.rightMov    > 10){tf.rightMov    = 10;}
							if(tf.rightMovMax > 10){tf.rightMovMax = 10;}
						}
					}
				}
			}

			if(skills.contents[i].type == 'Ｒ減少'  ){
				if(skills.contents[i].target == '敵軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.rightMov -= pow;
						if(tf.rightMov < 0){tf.rightMov = 0;}
					}else{
						tf.leftMov -= pow;
						if(tf.leftMov < 0){tf.leftMov  = 0;}
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					calcInit(side,i,0,a);
					if(side == 'L'){
						tf.leftMov -= pow;
						if(tf.leftMov < 0){tf.leftMov  = 0;}
					}else{
						tf.rightMov -= pow;
						if(tf.rightMov < 0){tf.rightMov = 0;}
					}
				}
			}

			if(skills.contents[i].type == '毒付与'  ){
				var TA =0;
				var TAnti =0;
				for(var n=0;n<6;n++){
					if(side == 'L'){
						var SkillValue = battleFuncSkillSet.searchSkill(n,'解毒治療','right');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','right');if(SkillValue[0] == 1){TAnti= 1;}
					}else{
						var SkillValue = battleFuncSkillSet.searchSkill(n,'解毒治療','left');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','left');if(SkillValue[0] == 1){TAnti= 1;}
					}
				}

				if(skills.contents[i].target == '敵軍単体'){
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(target == n){
							calcInit(side,i,n,a);
							if(side == 'L'){
								if(defend[n].attribute.indexOf('毒') != -1 || defend[n].attribute.indexOf('死') != -1 || 
								   defend[n].attribute.indexOf('器') != -1 || defend[n].attribute.indexOf('超') != -1 ){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									defend[n].poison += pow;
									if(defend[n].poison > 50){defend[n].poison = 50;}
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("戦術毒付与:"+defend[n].poison);
								}
							}else{
								if(defend[n].attribute.indexOf('毒') != -1 || defend[n].attribute.indexOf('死') != -1 || 
								   defend[n].attribute.indexOf('器') != -1 || defend[n].attribute.indexOf('超') != -1 ){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									defend[n].poison += pow;
									if(defend[n].poison > 50){defend[n].poison = 50;}
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("戦術毒付与:"+defend[n].poison);
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍一列'){
					var count = 0;
					if(side == 'R'){for(var k=0;k<3;k++){if(tf.leftParty[k].id  == 0 || tf.leftParty[k].HP.now  < 1){count++;dm("Rcount="+count);}}}
					if(side == 'L'){for(var k=0;k<3;k++){if(tf.rightParty[k].id == 0 ||tf.rightParty[k].HP.now  < 1){count++;dm("Lcount="+count);}}}
					if(count == 3){count = 3;}else{count = 0;}
					for(var n=count;n<count+3;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						calcInit(side,i,n,a);
						if(side == 'L'){
							if(defend[n].attribute.indexOf('毒') != -1 || defend[n].attribute.indexOf('死') != -1 || 
							   defend[n].attribute.indexOf('器') != -1 || defend[n].attribute.indexOf('超') != -1 ){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].poison += pow;
								if(defend[n].poison > 50){defend[n].poison = 50;}
								tf.viewTacticsSkillEffct[i][n] = 1;dm("毒:"+tf.viewTacticsSkillEffct[i][n]);
								dm("戦術毒付与:"+defend[n].poison);
							}
						}else{
							if(defend[n].attribute.indexOf('毒') != -1 || defend[n].attribute.indexOf('死') != -1 || 
							   defend[n].attribute.indexOf('器') != -1 || defend[n].attribute.indexOf('超') != -1 ){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].poison += pow;
								if(defend[n].poison > 50){defend[n].poison = 50;}
								tf.viewTacticsSkillEffct[i][n] = 1;dm("毒:"+tf.viewTacticsSkillEffct[i][n]);
								dm("戦術毒付与:"+defend[n].poison);
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍全体'){
					calcInit(side,i,0,a);
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(defend[n].attribute.indexOf('毒') != -1 || defend[n].attribute.indexOf('死') != -1 || 
							   defend[n].attribute.indexOf('器') != -1 || defend[n].attribute.indexOf('超') != -1 ){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].poison += pow;
								if(defend[n].poison > 50){defend[n].poison = 50;}
								tf.viewTacticsSkillEffct[i][n] = 1;dm("毒:"+tf.viewTacticsSkillEffct[i][n]);
								dm("戦術毒付与:"+defend[n].poison);
							}
						}else{
							if(defend[n].attribute.indexOf('毒') != -1 || defend[n].attribute.indexOf('死') != -1 || 
							   defend[n].attribute.indexOf('器') != -1 || defend[n].attribute.indexOf('超') != -1 ){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].poison += pow;
								if(defend[n].poison > 50){defend[n].poison = 50;}
								tf.viewTacticsSkillEffct[i][n] = 1;dm("毒:"+tf.viewTacticsSkillEffct[i][n]);
								dm("戦術毒付与:"+defend[n].poison);
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍全体'){
					calcInit(side,i,0,a);
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(attack[n].attribute.indexOf('毒') != -1 || attack[n].attribute.indexOf('死') != -1 || 
							   attack[n].attribute.indexOf('器') != -1 || attack[n].attribute.indexOf('超') != -1 ){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								attack[n].poison += pow;
								if(attack[n].poison > 50){attack[n].poison = 50;}
								tf.viewTacticsSkillEffct[i][n] = 1;dm("毒:"+tf.viewTacticsSkillEffct[i][n]);
								dm("戦術毒付与:"+attack[n].poison);
							}
						}else{
							if(attack[n].attribute.indexOf('毒') != -1 || attack[n].attribute.indexOf('死') != -1 || 
							   attack[n].attribute.indexOf('器') != -1 || attack[n].attribute.indexOf('超') != -1 ){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								attack[n].poison += pow;
								if(attack[n].poison > 50){attack[n].poison = 50;}
								tf.viewTacticsSkillEffct[i][n] = 1;dm("毒:"+tf.viewTacticsSkillEffct[i][n]);
								dm("戦術毒付与:"+attack[n].poison);
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '麻痺付与'){
				var TA =0;
				var TAnti =0;
				for(var n=0;n<6;n++){
					if(side == 'L'){
						var SkillValue = battleFuncSkillSet.searchSkill(n,'麻痺治療','right');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','right');if(SkillValue[0] == 1){TAnti= 1;}
					}else{
						var SkillValue = battleFuncSkillSet.searchSkill(n,'麻痺治療','left');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','left');if(SkillValue[0] == 1){TAnti= 1;}
					}
				}

				if(skills.contents[i].target == '敵軍単体'){
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(target == n){
							calcInit(side,i,n,a);
							if(side == 'L'){
								if(defend[n].attribute.indexOf('雷') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									defend[n].paralyze += pow;
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("戦術麻痺与:"+defend[n].paralyze);
								}
							}else{
								if(defend[n].attribute.indexOf('雷') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									defend[n].paralyze += pow;
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("戦術麻痺与:"+defend[n].paralyze);
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍一列'){
					var count = 0;
					if(side == 'R'){for(var k=0;k<3;k++){if(tf.leftParty[k].id  == 0 || tf.leftParty[k].HP.now  < 1){count++;dm("Rcount="+count);}}}
					if(side == 'L'){for(var k=0;k<3;k++){if(tf.rightParty[k].id == 0 ||tf.rightParty[k].HP.now  < 1){count++;dm("Lcount="+count);}}}
					if(count == 3){count = 3;}else{count = 0;}
					for(var n=count;n<count+3;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						calcInit(side,i,n,a);
						if(side == 'L'){
							if(defend[n].attribute.indexOf('雷') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].paralyze += pow;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術麻痺与:"+defend[n].paralyze);
							}
						}else{
							if(defend[n].attribute.indexOf('雷') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].paralyze += pow;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術麻痺与:"+defend[n].paralyze);
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍全体'){
					calcInit(side,i,0,a);
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(defend[n].attribute.indexOf('雷') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].paralyze += pow;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術麻痺与:"+defend[n].paralyze);
							}
						}else{
							if(defend[n].attribute.indexOf('雷') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].paralyze += pow;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術麻痺与:"+defend[n].paralyze);
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍全体'){
					calcInit(side,i,0,a);
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(attack[n].attribute.indexOf('雷') != -1 || attack[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								attack[n].paralyze += pow;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術麻痺与:"+defend[n].paralyze);
							}
						}else{
							if(attack[n].attribute.indexOf('雷') != -1 || attack[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								attack[n].paralyze += pow;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術麻痺与:"+defend[n].paralyze);
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '呪い付与'){
				var TA =0;
				var TAnti =0;
				for(var n=0;n<6;n++){
					if(side == 'L'){
						var SkillValue = battleFuncSkillSet.searchSkill(n,'解呪治療','right');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','right');if(SkillValue[0] == 1){TAnti= 1;}
					}else{
						var SkillValue = battleFuncSkillSet.searchSkill(n,'解呪治療','left');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','left');if(SkillValue[0] == 1){TAnti= 1;}
					}
				}

				if(skills.contents[i].target == '敵軍単体'){
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(target == n){
							calcInit(side,i,n,a);
							if(side == 'L'){
								if(defend[n].attribute.indexOf('超') != -1){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									defend[n].curse = 1;
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("戦術呪付与:"+defend[n].curse);
								}
							}else{
								if(defend[n].attribute.indexOf('超') != -1){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									defend[n].curse = 1;
									tf.viewTacticsSkillEffct[i][n] = 1;
									dm("戦術呪付与:"+defend[n].curse);
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍一列'){
					var count = 0;
					if(side == 'R'){for(var k=0;k<3;k++){if(tf.leftParty[k].id  == 0 || tf.leftParty[k].HP.now  < 1){count++;dm("Rcount="+count);}}}
					if(side == 'L'){for(var k=0;k<3;k++){if(tf.rightParty[k].id == 0 ||tf.rightParty[k].HP.now  < 1){count++;dm("Lcount="+count);}}}
					if(count == 3){count = 3;}else{count = 0;}
					for(var n=count;n<count+3;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						calcInit(side,i,n,a);
						if(side == 'L'){
							if(defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].curse = 1;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術呪付与:"+defend[n].curse);
							}
						}else{
							if(defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].curse = 1;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術呪付与:"+defend[n].curse);
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍全体'){
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].curse = 1;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術呪付与:"+defend[n].curse);
							}
						}else{
							if(defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								defend[n].curse = 1;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術呪付与:"+defend[n].curse);
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍全体'){
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(attack[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								attack[n].curse = 1;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術呪付与:"+attack[n].curse);
							}
						}else{
							if(attack[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								attack[n].curse = 1;
								tf.viewTacticsSkillEffct[i][n] = 1;
								dm("戦術呪付与:"+attack[n].curse);
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '魅了付与'){
				var TA =0;
				var TAnti =0;
				dm("攻属性:"+a+":"+attack[a].attribute);
				/*
				for(var n=0;n<6;n++){
					if(side == 'L'){
						var SkillValue = battleFuncSkillSet.searchSkill(n,'解呪治療','right');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','right');if(SkillValue[0] == 1){TAnti= 1;}
						dm("防属性:"+defend[n].attribute);
					}else{
						var SkillValue = battleFuncSkillSet.searchSkill(n,'解呪治療','left');if(SkillValue[0] == 1){TAnti= 1;}
						var SkillValue = battleFuncSkillSet.searchSkill(n,'絶対治療','left');if(SkillValue[0] == 1){TAnti= 1;}
						dm("防属性:"+defend[n].attribute);
					}
				}
				*/

				if(skills.contents[i].target == '敵軍単体'){
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(target == n){
							calcInit(side,i,n,a);
							if(side == 'L'){
								if(defend[n].attribute.indexOf('火') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									if(attack[a].attribute.indexOf('男') != -1 && defend[n].attribute.indexOf('女') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
									if(attack[a].attribute.indexOf('女') != -1 && defend[n].attribute.indexOf('男') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
									dm("戦術魅了与:"+defend[n].charm);
								}
							}else{
								if(defend[n].attribute.indexOf('火') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
								var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
								if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
									if(attack[a].attribute.indexOf('男') != -1 && defend[n].attribute.indexOf('女') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
									if(attack[a].attribute.indexOf('女') != -1 && defend[n].attribute.indexOf('男') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
									dm("戦術魅了与:"+defend[n].charm);
								}
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍一列'){
					var count = 0;
					if(side == 'R'){for(var k=0;k<3;k++){if(tf.leftParty[k].id  == 0 || tf.leftParty[k].HP.now  < 1){count++;dm("Rcount="+count);}}}
					if(side == 'L'){for(var k=0;k<3;k++){if(tf.rightParty[k].id == 0 ||tf.rightParty[k].HP.now  < 1){count++;dm("Lcount="+count);}}}
					if(count == 3){count = 3;}else{count = 0;}
					for(var n=count;n<count+3;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						calcInit(side,i,n,a);
						if(side == 'L'){
							if(defend[n].attribute.indexOf('火') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								dm(attack[a].unitName+":"+attack[a].attribute+"/"+defend[n].unitName+":"+defend[n].attribute);
								if(attack[a].attribute.indexOf('男') != -1 && defend[n].attribute.indexOf('女') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;dm("戦術魅了与:"+defend[n].charm);}
								if(attack[a].attribute.indexOf('女') != -1 && defend[n].attribute.indexOf('男') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;dm("戦術魅了与:"+defend[n].charm);}
								
							}
						}else{
							if(defend[n].attribute.indexOf('火') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								dm(attack[a].unitName+":"+attack[a].attribute+"/"+defend[n].unitName+":"+defend[n].attribute);
								if(attack[a].attribute.indexOf('男') != -1 && defend[n].attribute.indexOf('女') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;dm("戦術魅了与:"+defend[n].charm);}
								if(attack[a].attribute.indexOf('女') != -1 && defend[n].attribute.indexOf('男') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;dm("戦術魅了与:"+defend[n].charm);}
							}
						}
					}
				}
				if(skills.contents[i].target == '敵軍全体'){
					calcInit(side,i,0,a);
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(defend[n].attribute.indexOf('火') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								if(attack[a].attribute.indexOf('男') != -1 && defend[n].attribute.indexOf('女') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								if(attack[a].attribute.indexOf('女') != -1 && defend[n].attribute.indexOf('男') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								dm("戦術魅了与:"+defend[n].charm);
							}
						}else{
							if(defend[n].attribute.indexOf('火') != -1 || defend[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								if(attack[a].attribute.indexOf('男') != -1 && defend[n].attribute.indexOf('女') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								if(attack[a].attribute.indexOf('女') != -1 && defend[n].attribute.indexOf('男') != -1){defend[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								dm("戦術魅了与:"+defend[n].charm);
							}
						}
					}
				}
				if(skills.contents[i].target == '自軍全体'){
					calcInit(side,i,0,a);
					for(var n=0;n<6;n++){
						TA = 0;
						if(defend[n].id == 0){continue;}
						if(side == 'L'){
							if(attack[n].attribute.indexOf('火') != -1 || attack[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','left');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								if(attack[a].attribute.indexOf('男') != -1 && attack[n].attribute.indexOf('女') != -1){attack[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								if(attack[a].attribute.indexOf('女') != -1 && attack[n].attribute.indexOf('男') != -1){attack[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								dm("戦術魅了与:"+attack[n].charm);
							}
						}else{
							if(attack[n].attribute.indexOf('火') != -1 || attack[n].attribute.indexOf('超') != -1){TA = 1;}
							var SkillValue = battleFuncSkillSet.searchSkill(n,'異常耐性','right');
							if(SkillValue[0] == 0 && TA == 0 && TAnti == 0){
								if(attack[a].attribute.indexOf('男') != -1 && attack[n].attribute.indexOf('女') != -1){attack[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								if(attack[a].attribute.indexOf('女') != -1 && attack[n].attribute.indexOf('男') != -1){attack[n].charm = 1;tf.viewTacticsSkillEffct[i][n] = 1;}
								dm("戦術魅了与:"+attack[n].charm);
							}
						}
					}
				}
			}

			if(skills.contents[i].type == '治療付与'){
				if(skills.contents[i].target == '敵軍陣営'){
					if(side == 'L'){tf.Medical_R = 1;}else{tf.Medical_L = 1;}
dm("治療付与 by敵軍陣営");
					for(var n=0;n<6;n++){
						defend[n].poison      = 0;
						defend[n].paralyze    = 0;
						defend[n].seal        = 0;
						defend[n].cutDown.pow = 0;
						defend[n].cutDown.def = 0;
						defend[n].cutDown.spd = 0;
						defend[n].cutDown.mor = 0;
						defend[n].curse       = 0;
						defend[n].charm       = 0;
					}
				}
				if(skills.contents[i].target == '自軍陣営'){
					if(side == 'L'){tf.Medical_L = 1;}else{tf.Medical_R = 1;}
dm("治療付与 by自軍陣営/L:"+tf.Medical_L+"/R:"+tf.Medical_R);
					for(var n=0;n<6;n++){
						attack[n].poison      = 0;
						attack[n].paralyze    = 0;
						attack[n].seal        = 0;
						attack[n].cutDown.pow = 0;
						attack[n].cutDown.def = 0;
						attack[n].cutDown.spd = 0;
						attack[n].cutDown.mor = 0;
						attack[n].curse       = 0;
						attack[n].charm       = 0;
					}
				}
			}
		}
	}

	function viewTacticsSkillEffect(side){
	//tf.tacticsSkillData.effect.target //エフェクト対象
	//tf.tacticsSkillData.effect.name //エフェクト名称
	//tf.tacticsSkillData.effect.type //エフェクト分類
	var rx = [743,743,743,887,887,887],ry = [596,642,688,596,642,688];
	var lx = [217,217,217, 73, 73, 73],ly = [596,642,688,596,642,688];
	tf.x=[],tf.y=[];
	tf.tacticsEffectLoop = 0;
		switch(tf.tacticsSkillData.effect.name){
			case '対地':tf.xr=250;tf.yr=250;tf.effectImage = '剣戟'    ;tf.tacticsSE ='se0702_刃刺突音中ズシュッ';break;
			case '対海':tf.xr=250;tf.yr=250;tf.effectImage = '打撃'    ;tf.tacticsSE ='se1002_殴打中バシッ';break;
			case '対空':tf.xr=250;tf.yr=250;tf.effectImage = '貫通'    ;tf.tacticsSE ='se0701_刃刺突音弱ズビシュ';break;
			case   '火':tf.xr=250;tf.yr=300;tf.effectImage = '火単体'  ;tf.tacticsSE ='se2000_炎系魔法2';break;
			case   '氷':tf.xr=250;tf.yr=250;tf.effectImage = '氷柱'    ;tf.tacticsSE ='se2103_魔法キィン…';break;
			case   '風':tf.xr=250;tf.yr=350;tf.effectImage = '風単体'  ;tf.tacticsSE ='se2004_突風ショート';break;
			case   '土':tf.xr=250;tf.yr=350;tf.effectImage = '土柱'    ;tf.tacticsSE ='se1302_爆音短ダァン';break;
			case   '雷':tf.xr=250;tf.yr=250;tf.effectImage = '雷単体'  ;tf.tacticsSE ='se2005_雷撃ズバァン';break;
			case   '水':tf.xr=250;tf.yr=350;tf.effectImage = '水単体'  ;tf.tacticsSE ='se4006_水をかけるドッパァン';break;
			case   '光':tf.xr=250;tf.yr=250;tf.effectImage = '光単体'  ;tf.tacticsSE ='se2028_消去系魔法1';break;
			case   '闇':tf.xr=250;tf.yr=250;tf.effectImage = '闇光'    ;tf.tacticsSE ='se2003_土系魔法3';break;
			case   '無':tf.xr=250;tf.yr=250;tf.effectImage = '無画'    ;tf.tacticsSE ='se9000_無音';break;
			case '回復':tf.xr=250;tf.yr=250;tf.effectImage = '回復'    ;tf.tacticsSE ='se2006_光系魔法3';break;
			case '蘇生':tf.xr=250;tf.yr=250;tf.effectImage = '蘇生'    ;tf.tacticsSE ='se2019_超回復1';break;
			case '弱体':tf.xr=250;tf.yr=250;tf.effectImage = '弱体'    ;tf.tacticsSE ='se2104_魔法キシュシュッ';break;
			case '強化':tf.xr=250;tf.yr=250;tf.effectImage = '集中'    ;tf.tacticsSE ='se5008_アニメＳＥきゅぴーん';break;
			case '毒化':tf.xr=250;tf.yr=250;tf.effectImage = '毒単体'  ;tf.tacticsSE ='se5028_アニメＳＥブワーシュ';break;
			case '呪い':tf.xr=250;tf.yr=250;tf.effectImage = '束縛'    ;tf.tacticsSE ='se2121_無韻発動シュヴィオン';break;
			case '麻痺':tf.xr=250;tf.yr=250;tf.effectImage = '紫雷'    ;tf.tacticsSE ='se3130_電磁音ビィィ';break;
			case '魅了':tf.xr=250;tf.yr=250;tf.effectImage = '閃光'    ;tf.tacticsSE ='se2102_魔法キュシィィン';break;
			case '治療':tf.xr=250;tf.yr=250;tf.effectImage = '状態回復';tf.tacticsSE ='se2021_状態回復2';break;
				default:tf.xr=250;tf.yr=250;tf.effectImage = 'クロー'  ;tf.tacticsSE ='se0702_刃刺突音中ズシュッ';break;
		}

//dm(side+":"+tf.tacticsSkillData.effect.target);
//dm(tf.tacticsSkillData.effect.name);
//dm(tf.tacticsSkillData.effect.type);
		if(side == 'R'){
			if(tf.tacticsSkillData.effect.target == '敵軍単体' || tf.tacticsSkillData.effect.target == '敵軍一列' || tf.tacticsSkillData.effect.target == '敵軍全体'){
				tf.x=lx;tf.y=ly;
			}
			if(tf.tacticsSkillData.effect.target == '自軍単体' || tf.tacticsSkillData.effect.target == '自軍一列' || tf.tacticsSkillData.effect.target == '自軍全体'){
				tf.x=rx;tf.y=ry;
			}
			if(tf.tacticsSkillData.effect.target == '敵軍城壁' ){tf.cx=377;tf.cy=665;}
			if(tf.tacticsSkillData.effect.target == '自軍城壁' ){tf.cx=582;tf.cy=665;}
			if(tf.tacticsSkillData.effect.target == '敵軍陣営' ){tf.cx=240;tf.cy=600;}
			if(tf.tacticsSkillData.effect.target == '自軍陣営' ){tf.cx=770;tf.cy=600;}
		}else{
			if(tf.tacticsSkillData.effect.target == '敵軍単体' || tf.tacticsSkillData.effect.target == '敵軍一列' || tf.tacticsSkillData.effect.target == '敵軍全体'){
				tf.x=rx;tf.y=ry;
			}
			if(tf.tacticsSkillData.effect.target == '自軍単体' || tf.tacticsSkillData.effect.target == '自軍一列' || tf.tacticsSkillData.effect.target == '自軍全体'){
				tf.x=lx;tf.y=ly;
			}
			if(tf.tacticsSkillData.effect.target == '敵軍城壁' ){tf.cx=582;tf.cy=665;}
			if(tf.tacticsSkillData.effect.target == '自軍城壁' ){tf.cx=377;tf.cy=665;}
			if(tf.tacticsSkillData.effect.target == '敵軍陣営' ){tf.cx=770;tf.cy=600;}
			if(tf.tacticsSkillData.effect.target == '自軍陣営' ){tf.cx=240;tf.cy=600;}
		}

		tf.tacticsEffects=[];
		if(tf.tacticsSkillData.effect.type == 'ダメージ' || tf.tacticsSkillData.effect.type == '回復' ||tf.tacticsSkillData.effect.type == '蘇生' ||tf.tacticsSkillData.effect.type == '付与'){
			if(tf.tacticsSkillData.effect.target == '敵軍単体' || tf.tacticsSkillData.effect.target == '自軍単体'){
				for(var i=0;i<3;i++){
					for(var n=0;n<6;n++){
						if(tf.viewTacticsSkillEffct[i][n] == 1){
							kag.tagHandlers.image(%[layer:'12', page:'fore', storage:tf.effectImage, left:tf.x[n]-tf.xr, top:tf.y[n]-tf.yr, opacity:255, visible:true, mode:'psadd']);//エフェクト
							kag.tagHandlers.shakes(%[layer:'12',time:100,hmax:1,vmax:1]);
							kag.tagHandlers.waitshakes(%[canskip:'false']);
							tf.tacticsEffects[n] = 1;
						}
					}
				}
			}
			if(tf.tacticsSkillData.effect.target == '敵軍一列' || tf.tacticsSkillData.effect.target == '自軍一列'){
				var startValue;
				for(var i=0;i<3;i++){
					for(var n=0;n<6;n++){
						dm("### tf.viewTacticsSkillEffct["+i+"]["+n+"]="+tf.viewTacticsSkillEffct[i][n]);
						if(tf.viewTacticsSkillEffct[i][n] == 1){
							if( n <= 2 ){
								startValue = 0;break;
							}else{
								startValue = 3;break;
							}
							dm("### startValue="+startValue);
						}
					}
				}
				for(var i=0;i<3;i++){
					for(var n=0;n<6;n++){
						if(tf.viewTacticsSkillEffct[i][n] == 1){
							tf.tacticsEffects[n] = 1;
						}
					}
				}
				tf.tacticsEffectLoop = 3;
				tf.tacticsEffectstartValue = startValue;
			}
			if(tf.tacticsSkillData.effect.target == '敵軍全体' || tf.tacticsSkillData.effect.target == '自軍全体'){
				if(tf.tacticsEffectLoop != 3){
					tf.tacticsEffectLoop = 6;
					for(var i=0;i<3;i++){
						for(var n=0;n<6;n++){
							if(tf.viewTacticsSkillEffct[i][n] == 1){
								tf.tacticsEffects[n] = 1;
							}
						}
					}
				}
			}
		}else if(tf.tacticsSkillData.effect.type == '城壁破壊' || tf.tacticsSkillData.effect.type == '城壁修復' || tf.tacticsSkillData.effect.type == '城壁拡張'){
			kag.tagHandlers.image(%[layer:'12', page:'fore', storage:tf.effectImage, left:tf.cx-tf.xr, top:tf.cy-tf.yr, opacity:255, visible:true, mode:'psadd']);//エフェクト
			kag.tagHandlers.shakes(%[layer:'12',time:100,hmax:1,vmax:1]);
			kag.tagHandlers.waitshakes(%[canskip:'false']);
		}else{
			kag.tagHandlers.image(%[layer:'12', page:'fore', storage:tf.effectImage, left:tf.cx-tf.xr, top:tf.cy-tf.yr, opacity:255, visible:true, mode:'psadd']);//エフェクト
			kag.tagHandlers.shakes(%[layer:'12',time:100,hmax:1,vmax:1]);
			kag.tagHandlers.waitshakes(%[canskip:'false']);
		}
	}

	function viewTacticsSkillState(side){
		var tacticsDamageViewR = [];
		var tacticsDamageViewL = [];
		var tacticsRecoveryViewR = [];
		var tacticsRecoveryViewL = [];
		var rx = [694,694,694,838,838,838],ry = [574,620,666,574,620,666];
		var lx = [168,168,168, 24, 24, 24],ly = [574,620,666,574,620,666];

		for(var i=0;i<3;i++){
			for(var n=0;n<6;n++){
dm("tf.viewTacticsSkillEffct["+i+"]["+n+"]="+tf.viewTacticsSkillEffct[i][n]);
				if(side == 'R' && tf.tacticsSkillData.contents[i].type == 'ダメージ' && tf.viewTacticsSkillEffct[i][n] == 1 && tf.leftParty[n].id != 0){
					tacticsDamageViewL[n] += tf.viewTacticsSkillDamageL[i][n];
					battleFuncsView.numDraw(tacticsDamageViewL[n], 'btl_Number0-9damage.png'   ,statusWindowEffects,lx[n],ly[n],5);	//ダメージ
					if(tf.leftParty[n].HP.now < 1){tf.leftParty[n].HP.now = 0;}
				}else if(side == 'L' && tf.tacticsSkillData.contents[i].type == 'ダメージ' && tf.viewTacticsSkillEffct[i][n] == 1 && tf.rightParty[n].id != 0){
					tacticsDamageViewR[n] += tf.viewTacticsSkillDamageR[i][n];
					battleFuncsView.numDraw(tacticsDamageViewR[n], 'btl_Number0-9damage.png'   ,statusWindowEffects,rx[n],ry[n],5);	//ダメージ
					if(tf.rightParty[n].HP.now < 1){tf.rightParty[n].HP.now = 0;}
				}
				if(side == 'L' && (tf.tacticsSkillData.contents[i].type == '回復' || tf.tacticsSkillData.contents[i].type == '蘇生') && tf.viewTacticsSkillEffct[i][n] == 1 && tf.leftParty[n].id != 0){
					tacticsRecoveryViewL[n] += tf.viewTacticsSkillRecoveryL[i][n];
					battleFuncsView.numDraw(tacticsRecoveryViewL[n], 'btl_Number0-9recovery.png' ,statusWindowEffects,lx[n],ly[n],5);	//リカバリ
					if(tf.leftParty[n].HP.max < tf.leftParty[n].HP.now){tf.leftParty[n].HP.now = tf.leftParty[n].HP.max;}
				}else if(side == 'R' && (tf.tacticsSkillData.contents[i].type == '回復' || tf.tacticsSkillData.contents[i].type == '蘇生') && tf.viewTacticsSkillEffct[i][n] == 1 && tf.rightParty[n].id != 0){
					tacticsRecoveryViewR[n] += tf.viewTacticsSkillRecoveryR[i][n];
					battleFuncsView.numDraw(tacticsRecoveryViewR[n], 'btl_Number0-9recovery.png' ,statusWindowEffects,rx[n],ry[n],5);	//リカバリ
					if(tf.rightParty[n].HP.max < tf.rightParty[n].HP.now){tf.rightParty[n].HP.now = tf.rightParty[n].HP.max;}
				}

				if(side == 'L' && tf.tacticsSkillData.contents[i].type == '城壁破壊'){
					battleFuncsView.numDraw(tf.rightLndp, 'btl_Number0-9damage.png'  ,statusWindowEffects,498,647,5);	//地形ダメージ
				}else if(side == 'R' && tf.tacticsSkillData.contents[i].type == '城壁破壊'){
					battleFuncsView.numDraw(tf.leftLndp, 'btl_Number0-9damage.png'   ,statusWindowEffects,342,647,0);	//地形ダメージ
				}

				if(side == 'L' && tf.tacticsSkillData.contents[i].type == '城壁修復'){
					battleFuncsView.numDraw(tf.leftLndp, 'btl_Number0-9recovery.png' ,statusWindowEffects,342,647,5);	//地形ダメージ
				}else if(side == 'R' && tf.tacticsSkillData.contents[i].type == '城壁修復'){
					battleFuncsView.numDraw(tf.rightLndp, 'btl_Number0-9recovery.png',statusWindowEffects,498,647,0);	//地形ダメージ
				}

				if(side == 'L' && tf.tacticsSkillData.contents[i].type == '城壁拡張'){
					battleFuncsView.numDraw(tf.leftLndp, 'btl_Number0-9recovery.png' ,statusWindowEffects,342,647,5);	//地形ダメージ
				}else if(side == 'R' && tf.tacticsSkillData.contents[i].type == '城壁拡張'){
					battleFuncsView.numDraw(tf.rightLndp, 'btl_Number0-9recovery.png',statusWindowEffects,498,647,0);	//地形ダメージ
				}
			}
		}

		for(var i=0;i<6;i++){
			//戦術リカバリ(右)
			dm(i+"R.リカバリ="+tf.rightParty[i].HP.recovery);
			if(tf.rightParty[i].HP.recovery > 0 && tf.rightParty[i].HP.now < 1 && tf.rightParty[i].curse < 1 && tf.rightParty[i].seal < 1){
				tf.rightParty[i].HP.now = (int)(tf.rightParty[i].HP.max * (tf.rightParty[i].HP.recovery / 100));
				dm(i+"R.HP.now="+tf.rightParty[i].HP.now);
				tf.rightParty[i].HP.recovery = 0;
				battleFuncsView.numDraw(tf.rightParty[i].HP.now, 'btl_Number0-9recovery.png' ,statusWindowEffects,rx[i]-23,ry[i]+8);	//リカバリ
			}

			//戦術ドリカバリ(左)
			dm(i+"L.リカバリ="+tf.leftParty[i].HP.recovery);
			if(tf.leftParty[i].HP.recovery > 0 && tf.leftParty[i].HP.now < 1 && tf.leftParty[i].curse < 1 && tf.leftParty[i].seal < 1){
				tf.leftParty[i].HP.now = (int)(tf.leftParty[i].HP.max * (tf.leftParty[i].HP.recovery / 100));
				dm(i+"L.HP.now="+tf.leftParty[i].HP.now);
				tf.leftParty[i].HP.recovery = 0;
				battleFuncsView.numDraw(tf.leftParty[i].HP.now, 'btl_Number0-9recovery.png' ,statusWindowEffects,lx[i]-23,ly[i]+8);	//リカバリ
			}
		}
	}

	function commDisplay(id){
dm("### commDisplay("+id+") ###");
		var skillCommentPanel = kag.fore.layers[13];//参照レイヤー
		skillCommentPanel.visible = true;
		var txtLayer = new Layer(kag, kag.fore.base);//名前レイヤ
		var comment;
		txtLayer.setPos(kag.fore.layers[12].left, kag.fore.layers[12].top, kag.fore.layers[12].imageWidth, kag.fore.layers[12].imageHeight);
		txtLayer.font.mapPrerenderedFont( "uppg16.tft" );//
		for(var i=0;i<gf.skill.count;i++){
			if(id == gf.skill[i].id){
				comment = gf.skill[i].comment;
				//comment = gf.skill[i].memo;
			}
		}
		var  c = new Array();
		var _x = 604, _y = 180, _r = 0, _l = 0;
		for(var i=0;i<comment.length;i++){
			c = comment.substring(i,1);
			if( c == ';'){_r++;_l=0;}
			else{
				if(_l >12){_l=0;_r++;}
				_text_draw_super_(txtLayer, _x+_l*16, _y+_r*18, c, 0xffffff, 16,%[ outline:1, outlinecolor:0x545429,shadow:1, shadowopacity:128, shadowblur:1,gradcolor1:0xfffff3, gradcolor2:0x686852] );
				_l++;
			}
		}
		//skillCommentPanel.operateRect(654,180,txtLayer, 0, 0, txtLayer.imageWidth, txtLayer.imageHeight);
		skillCommentPanel.operateRect(43,0,txtLayer, 0, 0, txtLayer.imageWidth, txtLayer.imageHeight);
//dm(id+" ｺﾒﾝﾄ:"+comment);
	}

	function commErase(){
		var skillCommentPanel = kag.fore.layers[13];//参照レイヤー
		skillCommentPanel.visible=false;
		skillCommentPanel.fillRect(0, 0, skillCommentPanel.width, skillCommentPanel.height, 0x00000000);
//dm("### commErase() ###");
	}
}
